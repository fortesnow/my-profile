'use client';

import React from 'react';

interface MonsterPixelArtProps {
  type: string;
  isAttacked?: boolean;
}

// モンスターピクセルアート用のデータ定義
const monsterData = {
  slime: {
    width: 16,
    height: 16,
    pixelSize: 4,
    palette: [
      "#00000000", "#1e3a60", "#0f172a", "#3b82f6", "#1d4ed8", "#2563eb",
      "#93c5fd", "#bfdbfe", "#60a5fa", "#424b8e", "#121f42",
      "#283677", "#1e40af", "#1e3a8a", "#172554", "#dbeafe"
    ],
    data: [
      [0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0],
      [0,0,0,0,0,1,1,2,2,1,1,0,0,0,0,0],
      [0,0,0,0,1,2,2,3,3,2,2,1,0,0,0,0],
      [0,0,0,1,2,3,3,4,4,3,3,2,1,0,0,0],
      [0,0,1,2,3,4,4,5,5,4,4,3,2,1,0,0],
      [0,1,2,3,4,5,5,6,6,5,5,4,3,2,1,0],
      [0,1,2,4,5,6,6,7,7,6,6,5,4,2,1,0],
      [1,2,3,4,5,6,7,8,8,7,6,5,4,3,2,1],
      [1,2,3,4,5,6,7,8,8,7,6,5,4,3,2,1],
      [1,2,3,4,5,6,7,7,7,7,6,5,4,3,2,1],
      [1,2,3,4,5,6,6,7,7,6,6,5,4,3,2,1],
      [0,1,2,3,4,5,6,0,0,6,5,4,3,2,1,0],
      [0,1,1,2,3,4,0,9,9,0,4,3,2,1,1,0],
      [0,0,0,1,1,1,10,11,11,10,1,1,1,0,0,0],
      [0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    ]
  },
  dragon: {
    width: 16,
    height: 16,
    pixelSize: 4,
    palette: [
      "#00000000", "#781c16", "#b91c1c", "#ef4444", "#fca5a5", "#fee2e2",
      "#991b1b", "#7f1d1d", "#450a0a", "#f87171", "#fecaca",
      "#dc2626", "#ea580c", "#fdba74", "#c2410c", "#27272a"
    ],
    data: [
      [0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,2,3,4,5,0,0,0],
      [0,0,0,0,0,0,0,0,2,6,3,3,4,0,0,0],
      [0,0,0,0,0,0,0,2,6,3,3,3,3,4,0,0],
      [0,0,0,0,0,0,2,6,3,3,3,3,3,3,7,0],
      [0,0,0,0,0,8,6,3,3,3,3,3,3,3,7,0],
      [0,0,0,0,8,6,3,3,3,9,10,3,6,6,7,0],
      [0,0,0,8,6,3,3,3,3,0,0,6,2,1,0,0],
      [0,0,8,6,6,3,3,11,6,6,6,2,1,0,0,0],
      [0,1,6,3,3,3,11,6,2,2,2,1,0,0,0,0],
      [1,6,3,3,3,11,6,2,1,0,0,0,0,0,0,0],
      [1,3,3,3,11,6,2,1,0,0,0,0,0,0,0,0],
      [0,1,6,11,6,2,12,13,14,0,0,0,0,0,0,0],
      [0,0,1,1,1,7,6,12,14,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,1,1,15,15,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    ]
  },
  ghost: {
    width: 16,
    height: 16,
    pixelSize: 4,
    palette: [
      "#00000000", "#d8dce9", "#bbc5e1", "#8f99bf", "#737ca7", "#525986",
      "#333764", "#272953", "#151731", "#0f1124", "#737ca7",
      "#1e1e1e", "#0d0d0d", "#161625", "#6d7fb0", "#9fb4ff"
    ],
    data: [
      [0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0],
      [0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0],
      [0,0,0,1,2,2,3,3,3,3,2,2,1,0,0,0],
      [0,0,1,2,3,3,4,4,4,4,3,3,2,1,0,0],
      [0,1,2,3,4,4,5,5,5,5,4,4,3,2,1,0],
      [0,1,2,3,4,5,6,6,6,6,5,4,3,2,1,0],
      [1,2,3,4,5,6,7,7,7,7,6,5,4,3,2,1],
      [1,2,3,4,5,6,7,8,8,7,6,5,4,3,2,1],
      [1,2,3,4,5,6,7,8,8,7,6,5,4,3,2,1],
      [1,2,3,4,5,6,7,7,7,7,6,5,4,3,2,1],
      [1,2,3,4,5,6,0,9,9,0,6,5,4,3,2,1],
      [1,2,3,4,5,0,10,11,11,10,0,5,4,3,2,1],
      [1,2,3,4,5,6,12,13,13,12,6,5,4,3,2,1],
      [0,1,1,3,4,5,6,6,6,6,5,4,3,1,1,0],
      [0,0,0,1,2,3,4,5,5,4,3,2,1,0,0,0],
      [0,0,0,0,1,2,3,4,4,3,2,1,0,0,0,0]
    ]
  },
  cactuar: {
    width: 16,
    height: 16,
    pixelSize: 4,
    palette: [
      "#00000000", "#047857", "#065f46", "#059669", "#10b981", "#34d399",
      "#6ee7b7", "#a7f3d0", "#d1fae5", "#00332b", "#002921",
      "#005941", "#00422f", "#003327", "#0a1410", "#181818"
    ],
    data: [
      [0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,2,3,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,2,3,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,3,4,5,0,0,0,0,0,0,0],
      [0,0,0,0,0,3,4,5,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,3,4,5,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,3,4,5,0,0,0,0,0,0,0,0],
      [0,6,0,0,0,3,4,4,1,1,1,1,1,0,0,0],
      [6,7,8,0,0,3,4,4,4,4,4,4,4,1,0,0],
      [0,6,0,0,0,3,4,5,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,3,4,5,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,3,4,5,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,4,5,9,0,0,0,0,0,0,0],
      [0,0,0,0,0,9,3,4,0,0,0,0,0,0,0,0],
      [0,0,0,0,9,10,2,3,0,0,0,0,0,0,0,0],
      [0,0,0,9,10,11,1,2,0,0,0,0,0,0,0,0]
    ]
  }
};

export const MonsterPixelArt: React.FC<MonsterPixelArtProps> = ({ 
  type, 
  isAttacked = false
}) => {
  // 存在しないモンスタータイプの場合はデフォルトにフォールバック
  const monster = monsterData[type as keyof typeof monsterData] || monsterData.slime;
  
  // 表示サイズを設定
  const displaySize = 128;
  
  // 攻撃されたときのスタイル
  const attackedStyle = isAttacked ? {
    filter: 'brightness(1.5) contrast(1.2)',
    transform: 'translateX(-10px)',
    transition: 'transform 0.1s ease-in-out, filter 0.1s ease-in-out'
  } : {
    transition: 'transform 0.3s ease-in-out, filter 0.3s ease-in-out'
  };
  
  return (
    <div style={{
      width: `${displaySize}px`,
      height: `${displaySize}px`,
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      ...attackedStyle
    }}>
      <svg
        width={displaySize}
        height={displaySize}
        viewBox={`0 0 ${monster.width * monster.pixelSize} ${monster.height * monster.pixelSize}`}
        style={{
          imageRendering: 'pixelated'
        }}
      >
        {monster.data.map((row, y) =>
          row.map((colorIndex, x) => {
            // 透明ピクセルはスキップ
            if (colorIndex === 0) return null;

            return (
              <rect
                key={`${x}-${y}`}
                x={x * monster.pixelSize}
                y={y * monster.pixelSize}
                width={monster.pixelSize}
                height={monster.pixelSize}
                fill={monster.palette[colorIndex]}
              />
            );
          })
        )}
      </svg>
    </div>
  );
}; 